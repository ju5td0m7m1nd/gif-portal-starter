{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","onInputChange","event","value","target","getProvider","connection","Connection","Provider","sendGif","length","provider","program","Program","rpc","addGif","accounts","user","wallet","getGifList","useCallback","account","fetch","createGifAccount","startStuffOff","systemProgram","programId","signers","useEffect","onLoad","addEventListener","removeEventListener","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99239b33.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, { useEffect, useState , useCallback} from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\n\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\n\nimport './App.css';\n\nimport idl from './idl.json';\nimport kp from './keypair.json'\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n// Constants\nconst TWITTER_HANDLE = 'ju5td0m7m1nd';\nconst TWITTER_LINK = `https://twitter.com/@${TWITTER_HANDLE}`;\n\nconst TEST_GIFS = [\n\t'https://media1.giphy.com/media/sExL4UvrxRudpSIRCx/giphy.gif?cid=790b7611f9ec301234590b19da1ff30e6a95b262a41c315d&rid=giphy.gif&ct=g',\n\t'https://media.giphy.com/media/O2qojqa5s0VOJfbe2e/giphy.gif',\n\t'https://media.giphy.com/media/R1cZlHJ7lWLBM80L3z/giphy-downsized-large.gif',\n\t'https://media.giphy.com/media/17mh5wF6ElzT2czVNJ/giphy.gif'\n]\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\")\n      return\n    }\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n  \n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue)\n  \n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n  };\n\n\n  const getGifList = useCallback(async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      \n      console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n  \n    } catch (error) {\n      console.log(\"Error in getGifList: \", error)\n      setGifList(null);\n    }\n  }, []);\n\n  const createGifAccount = useCallback(async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\")\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n  \n    } catch(error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }, [getGifList]);\n\n\n  const renderConnectedContainer = () => {\n    \t// If we hit this, it means the program account hasn't be initialized.\n  if (gifList === null) {\n    return (\n      <div className=\"connected-container\">\n        <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n          Do One-Time Initialization For GIF Program Account\n        </button>\n      </div>\n    )\n  } \n  return (\n    <div className=\"connected-container\">\n    {/* Go ahead and add this input and button to start */}\n   <form\n     onSubmit={(event) => {\n       event.preventDefault();\n       sendGif();\n     }}\n   >\n   <input\n       type=\"text\"\n       placeholder=\"Enter gif link!\"\n       value={inputValue}\n       onChange={onInputChange}\n     />\n     <button type=\"submit\" className=\"cta-button submit-gif-button\">Submit</button>\n   </form>\n   <div className=\"gif-grid\">\n   {gifList.map((item, index) => (\n            <div className=\"gif-item\" key={index}>\n              <img src={item.gifLink} />\n            </div>\n          ))}\n   </div>\n </div>\n  )\n  };\n\n  // UseEffects\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      \n      // Call Solana program here.\n      getGifList()\n\n    }\n  }, [getGifList, walletAddress]);\n\n  return (\n    <div className=\"App\">\n\t\t\t{/* This was solely added for some styling fanciness */}\n\t\t\t<div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ–¼ GIF that GMI</p>\n          <p className=\"sub-text\">\n            View your GIF collection, probably nothing âœ¨\n          </p>\n          {/* Add the condition to show this only if we don't have a wallet address */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}